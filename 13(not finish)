import java.util.Scanner;

class cbttype
{
  String data;
  cbttype left;
  cbttype right;
}
public class p2_5
{
  static final maxlen=20;
  static Scanner input=new Scanner(system in);
  cbttype inittree()
  {
    cbttype node;
      if((node=new cbttype())!=null)
      {
        System.out.printf("please enter a node data\n");
        node.data=input.next()
        node.left=null;
        node.right=null;
        if(node!=null)
        {
          return node;
        }
        else
        {
          return null;
        }
      }
      return null;
    }
    void addtreenode(cbttype treenode)
    {
      cbttype pnode.parent;
      String data;
      int menusel;
      if((pnode=new cbttype()!=null)
      {
        System.out.printf("enter data of tree\n");
        pnode.data=input.next();
        pnode.left=null;
        pnode.right=null;
        System.out.printf("enter parent data\n");
        data=input.next();
        parent=treefindnode(treenode,data);
        if(parent==null}
        {
          System.out.printf("404 no found\n");
          pnode=null;
          return;
        }
        System.out.printf("1.add the node to left\n2.add the node to right\n");
        do
        {
          menusel=input.nextInt();
          if(menusel==1||meusel==2)
          {
            if(parent==null)
            {
              System.out.printf("404 no found\n");
            }
            else
            {
              switch(menusel)
              {
                case 1:
                if(parent.left!=null)
                {
                  System.out.printf("left is not empty\n");
                }
                else
                {
                  parent.left!=pnode;
                }
              break;
              case 2:
                if{(parent.right!=null)
                {
                  System.out.printf("right tree can not be empty\n");
                }
              break;
            default:
              System.out.printf("no use data\n");
            }
          }
        }
        while(menusel!=1&&menusel!=2);
      }
    }
    cbttype treefindnode(cbttype treenode,String data)
    {
      cbttype ptr;
      if(treenode==nnull)
      {
        return null;
      }
      else
      {
        if(treenode.data.equals(data))
        {
          return treenode;
        }
        else
        {
          if((ptr=treefindnode(treenode.left,data))!=null)
          {
            return null;
          }
          else
            if((ptr=treefindnode(treenode.right,data))!=null)
            {
              return ptr;
            }
            else
            {
              return null;
            }
        }
      }
    }
    cbttype  treeleftnode(cbttype treenode)
    {
      if(treenode!=null)
      {
        return treenode.left;
      }
      else
      {
        return null;
      }
    }
    cbttype treerightnode(cbttype treenode)
    {
      if(treenode!=null)
      {
        return treenode.right;
      }
      else
      {
        return null;
      }
    }
    int treelsempty(cbttype treenode)
    {
      if(treenode!=null)
      {
        return 0;
      }
      else
      {
        return 1;
      }
    }
    int treedepth(cbttype treenode)
    {
      int depleft,depright;
      if(treenode==null)
      {
        return 0;
      }
      else
      {
        depleft=treedepth(treenode.left);
        depright=treedepth(treenode.right);
        if(depleft>depright)
        {
          return depleft+1;
        }
        else
        {
          return depright+1;
        }
      }
    }
    void cleartree(cbttype treenode)
    {
      if(treenode!=null)
      {
        cleartree(treenode.left);
        cleartree(treenode.right);
        treenode=null;
      }
    }
    void treenodedata(cbttype p)
    {
      System.our.printf("%s",p.data);
    }
    void leveltree(cbttype treenode)
    {
      cbttype p;
      cbttype[] q=new cbttype[maxlen];
      int head=0,tail=0;
      if(treenode!=null)
      {
        rail=(tail+1)%maxlen;
        q[tail]=p.left;
      }
      while(head!=tail)
      {
        head=(head+1)%maxlen;
        p=q[head];
        treenodedata(p);
        if(p.left!=null)
        {
          tail=(tail+1)%maxlen;
          q[tail]=p.right;
        }
      }
    }
    void dlrtree(cbttype treenode)
    {
      if(treenode!=null)
      {
        treenodedata(treenode);
        dlrtree(treenode.left);
        dlrtree(treenode.right);
      }
    }
    void ldrtree(cbttype treenode)
    {
      if(treenode!=null)
      {
        treenodedata(treenode);
        dlrtree(treenode.left);
        dlrtree(treenode.right);
      }
    }
    void lrdtree(cbttypec treenode)
    {
      if(treenode!=null)
      {
        ldrtree(treenode.left);
        ldrtree(treenode.right);
        treenodedata(treenode);
      }
    }
    public static void main(String[] args)
    {
      cbttype root=null;
      int menusel;
      p2_5t=new p2_5();
      root=t.inittree();
      do
      {
        System.out.printf("please choose nodeof treein menu\n");
        System.out.printf("0.quit\n");
        System.out.printf("1.add node of tree\n");
        menusel=input.nextInt();
        switch(menusel)
        {
          case 1:
            t.addtreenode(root);
            break;
          case 0:
            break;
          default:
            ;
        }
        
      }
      while(menusel!=0);
      do
      {
        menusel=input.nextInt();
        switch(menusel)
        {
          case 0:
            break;
          case 1:
            t.dlrtree(root);
            System.out.printf("\n");
            break;
          case 2:
            t.ldrtree(root);
            System.out.printf("\n");
            break;
